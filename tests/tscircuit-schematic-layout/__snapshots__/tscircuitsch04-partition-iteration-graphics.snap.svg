<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0.6012907000000003" data-y="0.05027334999999962" cx="320" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
normal
unnamedsubcircuit7_connectivity_net0" data-x="0.050000000000000044" data-y="0.050546599999998956" cx="63.28324718809056" cy="319.8727570541174" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
not_connected
disconnected-0" data-x="1.1525814000000005" data-y="0.05000010000000028" cx="576.7167528119095" cy="320.12724294588264" r="3" fill="rgba(0, 0, 0, 0.2)" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="0.6012907000000003" data-y="0.05027334999999962" cx="320" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit7_connectivity_net0" data-x="0.050081400000000054" data-y="0.05" cx="63.32115231451277" cy="320.12728951237716" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
not_connected
disconnected-1" data-x="1.1525000000000005" data-y="0.05054669999999924" cx="576.6788476854872" cy="319.8727104876229" r="3" fill="rgba(0, 0, 0, 0.2)" />
  </g>
  <g>
    <polyline data-points="0.050000000000000044,0.050546599999998956 0.050081400000000054,0.05" data-type="line" data-label="" points="63.28324718809056,319.8727570541174 63.32115231451277,320.12728951237716" fill="none" stroke="hsl(72, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.6012907000000003" data-y="0.05027334999999962" x="40" y="296.58950986602684" width="560" height="46.82098026794631" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.002147466785714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="0.6012907000000003" data-y="0.05027334999999962" x="40.03790512642222" y="296.5894632995324" width="559.9241897471557" height="46.82107340093529" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.002147466785714287" />
  </g><text data-type="text" data-label="Iteration 1" data-x="0" data-y="0.10054669999999924" x="40" y="296.5894632995324" fill="black" font-size="2.3410536700467657" font-family="sans-serif" text-anchor="start" dominant-baseline="text-after-edge">Iteration 1</text>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 465.66494376181083,
        "c": 0,
        "e": 40,
        "b": 0,
        "d": -465.66494376181083,
        "f": 343.4105367004677
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>